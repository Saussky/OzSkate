// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
}

// Auth

model user {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  hashed_password String
  sessions        session[]
  admin           Boolean   @default(false)
}

model session {
  id        String   @id
  userId    String
  user      user     @relation(fields: [userId], references: [id])
  expiresAt DateTime

  @@index([userId])
}

// Not Auth

model shop {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  url      String    @unique
  state    String
  since_id String?
  products product[]
}

model product {
  id          String    @id @default(cuid())
  shopId      Int
  shop        shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  title       String
  handle      String
  description String?
  vendor      String?
  productType String?
  parentType  String?
  childType   String?
  tags        String?
  image       Json?
  variants    variant[] // One-to-many relationship with Variant
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime

  onSale             Boolean
  on_sale_variant_id String? // Null if no variants are on sale 
  cheapestPrice      Float? // Cached minimum price of variants 
  deleted            Boolean @default(false)

  duplicatesAsMaster    ProductDuplicate[] @relation("MasterProductDuplicates")
  duplicatesAsDuplicate ProductDuplicate[] @relation("DuplicateProductDuplicates")

  @@index([shopId])
  @@index([title])
  @@index([cheapestPrice])
  @@index([parentType])
  @@index([childType])
  @@index([createdAt])
  @@index([updatedAt])
}


model ProductDuplicate {
  id               String            @id @default(cuid())
  masterProductId   String
  duplicateProductId String
  status           DuplicateStatus  @default(suspected)
  reasons          Json?            // optional JSON field for similarity reasons
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  masterProduct      product        @relation("MasterProductDuplicates", fields: [masterProductId], references: [id], onDelete: Cascade)
  duplicateProduct   product        @relation("DuplicateProductDuplicates", fields: [duplicateProductId], references: [id], onDelete: Cascade)

  @@unique([masterProductId, duplicateProductId])
}

enum DuplicateStatus {
  suspected
  confirmed
  rejected
}

model variant {
  id             String   @id @default(cuid())
  productId      String
  product        product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  title          String?
  option1        String?
  option2        String?
  option3        String?
  sku            String?
  price          Float
  shoeSize       Float?
  deckSize       Float?
  compareAtPrice Float? // Original price (if discounted)
  position       Int
  taxable        Boolean?
  featuredImage  String?
  available      Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([productId])
  @@index([price])
  @@index([productId, price])
  @@index([shoeSize])
  @@index([deckSize])
}

model VendorRule {
  id             String   @id @default(cuid())
  vendorPattern  String
  // The vendor name that should be used when the pattern is matched.
  standardVendor String 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
