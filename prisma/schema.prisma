// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/ozskate"
  // url      = env("DATABASE_URL") // Use environment variable for PostgreSQL connection
}

// Auth

model user {
  id          String    @id @default(cuid())
  email       String    @unique
  username       String    @unique
  hashed_password    String
  sessions    session[]
  admin       Boolean   @default(false)
}

model session {
  id          String    @id
  userId      String
  user        user      @relation(fields: [userId], references: [id])
  expiresAt   DateTime

  @@index([userId])
}

// Not Auth

model shop {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  url      String    @unique
  state    String
  since_id String?
  products product[]
}

model product {
  id          String    @id @default(cuid())
  shopId      Int
  shop        shop @relation(fields: [shopId], references: [id])
  title       String
  handle      String
  description String?
  vendor      String?
  productType String?
  parentType  String?
  childType String?
  tags        String?
  image       Json?
  variants    variant[] // One-to-many relationship with Variant
  options     option[]  // One-to-many relationship with Option
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime

  onSale             Boolean
  on_sale_variant_id String? // Can be null if no variants are on sale
  cheapestPrice     Float?    // Cached minimum price of variants

  markedAsDuplicate    Boolean? // TODO: Rename to just duplicate
  duplicateProducts  product[]  @relation("ProductDuplicates")
  duplicatedBy       product[]  @relation("ProductDuplicates") // Opposite relation
  approved           Boolean    @default(false) // Admin approval flag  

  @@index([shopId])
  @@index([title])
  @@index([cheapestPrice])
  @@index([parentType])
  @@index([childType])
  @@index([createdAt])
  @@index([updatedAt])
}

model variant {
  id               String    @id @default(cuid())
  productId        String
  product          product   @relation(fields: [productId], references: [id])
  title            String?
  option1          String?
  option2          String?
  option3          String?
  sku              String?   
  price            Float    
  shoeSize         Float?  
  deckSize         Float?  
  compareAtPrice   Float?    // Original price (if discounted)
  position         Int
  taxable          Boolean?
  featuredImage    String?
  available        Boolean
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([productId]) 
  @@index([price])
  @@index([productId, price])
  @@index([shoeSize])
  @@index([deckSize])
}

// TODO: Not used, maybe remove
model option {
  id         String   @id @default(cuid())
  productId  String
  product    product  @relation(fields: [productId], references: [id])
  name       String
  position   Int
  values     String    // Comma-separated string

  @@index([productId])
}